# Copyright (C) 2025-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/admission/ingress_request_rate_limiter.h"
        - "mongo/db/server_options.h"

server_parameters:
    ingressRequestRateLimiterEnabled:
        description: Controls whether ingress request rate limiter mechanism is enabled.
        set_at: [startup, runtime]
        cpp_varname: gIngressRequestRateLimiterEnabled
        cpp_vartype: AtomicWord<bool>
        default: false
        redact: false

    ingressRequestAdmissionRatePerSec:
        description: "The number of new requests that will be admitted per second"
        set_at: [startup, runtime]
        cpp_varname: gIngressRequestRateLimiterRatePerSec
        cpp_vartype: Atomic<int32_t>
        on_update: IngressRequestRateLimiter::onUpdateAdmissionRatePerSec
        default:
            expr: std::numeric_limits<int32_t>::max()
        validator: {gte: 1}
        redact: false

    ingressRequestAdmissionBurstSize:
        description: >-
            The maximum number of requests above what the configured rate limit would allow that
            will be admitted before excess admissions begin to be rejected. This will allow the
            server to handle temporary bursts of requests or periods of time where the configured
            rate limit is exceeded slightly.
        set_at: [startup, runtime]
        cpp_varname: gIngressRequestRateLimiterBurstSize
        cpp_vartype: Atomic<int32_t>
        on_update: IngressRequestRateLimiter::onUpdateAdmissionBurstSize
        default:
            expr: std::numeric_limits<int32_t>::max()
        validator: {gte: 1}
        redact: false
