# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionConcatArrays

    let [
        l2.0 = getField(s1, "arr1") 
        l2.1 = getField(s1, "arr2") 
        l2.2 = concatArrays(l2.0, [2.5L, "str"], l2.1) 
    ] 
    in 
        if exists(l2.2) 
        then makeOwn(move(l2.2)) 
        elif ((typeMatch(move(l2.0), 1088) ?: true) || (typeMatch(move(l2.1), 1088) ?: true)) 
        then null 
        else fail(7158000, "$concatArrays only supports arrays") 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetDifference

    let [
        l5.0 = getField(s1, "arr2") 
        l5.1 = getField(s1, "arr3") 
    ] 
    in 
        if ((typeMatch(l5.0, 1088) ?: true) || (typeMatch(l5.1, 1088) ?: true)) 
        then null 
        elif (!(isArray(l5.0)) || !(isArray(l5.1))) 
        then fail(7158101, "All operands of $setDifference must be arrays.") 
        else setDifference(move(l5.0), move(l5.1)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetEquals

    let [
        l8.0 = getField(s1, "arr2") 
        l8.1 = getField(s1, "arr3") 
    ] 
    in 
        if ((!(isArray(l8.0)) || !(isArray(l8.1))) ?: true) 
        then fail(7158100, "All operands of $setEquals must be arrays.") 
        else setEquals(move(l8.0), move(l8.1)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetIntersection

    let [
        l11.0 = getField(s1, "arr2") 
        l11.1 = getField(s1, "arr3") 
    ] 
    in 
        if ((typeMatch(l11.0, 1088) ?: true) || (typeMatch(l11.1, 1088) ?: true)) 
        then null 
        elif (!(isArray(l11.0)) || !(isArray(l11.1))) 
        then fail(7158101, "All operands of $setIntersection must be arrays.") 
        else setIntersection(move(l11.0), move(l11.1)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetIsSubset

    let [
        l14.0 = getField(s1, "arr2") 
    ] 
    in 
        if (!(isArray(l14.0)) ?: true) 
        then fail(7158100, "All operands of $setIsSubset must be arrays.") 
        else setIsSubset([2.5L, "str"], move(l14.0)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetUnion

    let [
        l17.0 = getField(s1, "arr2") 
        l17.1 = getField(s1, "arr3") 
    ] 
    in 
        if ((typeMatch(l17.0, 1088) ?: true) || (typeMatch(l17.1, 1088) ?: true)) 
        then null 
        elif (!(isArray(l17.0)) || !(isArray(l17.1))) 
        then fail(7158101, "All operands of $setUnion must be arrays.") 
        else setUnion(move(l17.0), move(l17.1)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionReverseArray

    let [
        l19.0 = getField(s1, "arr2") 
    ] 
    in 
        if (typeMatch(l19.0, 1088) ?: true) 
        then null 
        elif isArray(l19.0) 
        then reverseArray(move(l19.0)) 
        else fail(7158002, "$reverseArray argument must be an array") 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSortArray

    let [
        l21.0 = getField(s1, "arr2") 
    ] 
    in 
        if (typeMatch(l21.0, 1088) ?: true) 
        then null 
        elif isArray(l21.0) 
        then sortArray(move(l21.0), {"" : -1L}) 
        else fail(7158001, "$sortArray input argument must be an array") 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionIsArray
(isArray(getField(s1, "arr2")) ?: false) 
